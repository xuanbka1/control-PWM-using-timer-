
learnAVR_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000144  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000544  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c6  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021e  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b8  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000116f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	43 c0       	rjmp	.+134    	; 0xcc <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:


static uint32_t count =0;
int main()
{
	 DDRB = 0xFF;
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	87 bb       	out	0x17, r24	; 23
	TCCR0 |= (1<<CS02) | (1<<CS00);
  4c:	83 b7       	in	r24, 0x33	; 51
  4e:	85 60       	ori	r24, 0x05	; 5
  50:	83 bf       	out	0x33, r24	; 51
	TCNT0 =131;
  52:	83 e8       	ldi	r24, 0x83	; 131
  54:	82 bf       	out	0x32, r24	; 50
	TIMSK = 1<<TOIE0;
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	89 bf       	out	0x39, r24	; 57

	sei();
  5a:	78 94       	sei
	
DDRC |= (1<<PC0);  //Nakes first pin of PORTC as Output
  5c:	a0 9a       	sbi	0x14, 0	; 20
DDRD |= 1<<PD6;
  5e:	8e 9a       	sbi	0x11, 6	; 17
// OR DDRC = 0x01;
DDRD &= ~(1<<PD2);//Makes firs pin of PORTD as Input
  60:	8a 98       	cbi	0x11, 2	; 17
DDRD &= ~(1<<PD3);//Makes firs pin of PORTD as Input
  62:	8b 98       	cbi	0x11, 3	; 17
// OR DDRD = 0x00; //Makes all pins of PORTD input
PORTB &=~ (1<<0);
  64:	c0 98       	cbi	0x18, 0	; 24

while(1) //infinite loop
{
}
  66:	ff cf       	rjmp	.-2      	; 0x66 <main+0x1e>

00000068 <__vector_9>:


}

// generate PWM 50%
ISR (TIMER0_OVF_vect){
  68:	1f 92       	push	r1
  6a:	0f 92       	push	r0
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	0f 92       	push	r0
  70:	11 24       	eor	r1, r1
  72:	8f 93       	push	r24
  74:	9f 93       	push	r25
  76:	af 93       	push	r26
  78:	bf 93       	push	r27
	
	TCNT0 =131;
  7a:	83 e8       	ldi	r24, 0x83	; 131
  7c:	82 bf       	out	0x32, r24	; 50
	count ++;
  7e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  82:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  86:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
  8a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	a1 1d       	adc	r26, r1
  92:	b1 1d       	adc	r27, r1
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  98:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  9c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
  a0:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
	if(count >100)
  a4:	85 36       	cpi	r24, 0x65	; 101
  a6:	91 05       	cpc	r25, r1
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	10 f0       	brcs	.+4      	; 0xb2 <__vector_9+0x4a>
	PORTB &=~ (1<<0);
  ae:	c0 98       	cbi	0x18, 0	; 24
  b0:	04 c0       	rjmp	.+8      	; 0xba <__vector_9+0x52>
	else
	PORTB ^= (1<<0);
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	89 27       	eor	r24, r25
  b8:	88 bb       	out	0x18, r24	; 24
	
	
	

}
  ba:	bf 91       	pop	r27
  bc:	af 91       	pop	r26
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
